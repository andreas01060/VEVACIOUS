from __future__ import division
import math
import numpy.linalg
import scipy
import sys
import iminuit as minuit
import time

# This file was automatically generated by Vevacious
# version 1.2.03.
# It contains 2 classes & several global variables & functions.
# These appear in the order:
# global variables and functions
# FunctionScaler class
# Vevacious class



outputFile = "./Top.vout"
lnOfThermalIntegrationFactor = 244.53
energyScale = 1011.13
energyScaleFourth = ( energyScale**4 )
inverseScale = ( 1.0 / energyScale )
inverseScaleSquared = ( 1.0 / ( energyScale * energyScale ) )
inverseScaleFourthed = ( 1.0 / energyScaleFourth )
numericalStepSize = 1.0
exponentCutOff = math.log( 0.5 * sys.float_info.max )


# First some general functions:

pathToCosmotransitions = "./CosmoTransitions-2.0a2/cosmoTransitions"
sys.path.append( pathToCosmotransitions )
import pathDeformation as CTPD
ctVersionString = getattr( CTPD, "__version__", "1" )
ctMajorVersion = int( ctVersionString.split( '.' )[ 0 ] )
import finiteT as CTFT

# Unfortunately due to UTF32 issues, PyMinuit is restricted to
# single-character variable names, so Vevacious internally renames the
# fields:
# vQ3 -> a, vT3 -> b, vd -> c, vu -> d
namesOfFields = [ 'a', 'b', 'c', 'd' ]
numberOfFields = len( namesOfFields )
internalFieldNamesToUserNames = { 'c': "vd",
                                  'a': "vQ3",
                                  'b': "vT3",
                                  'd': "vu" }
vevsTakenPositive = [  ]
fieldOrigin = { 'c': 0.0, 'a': 0.0, 'b': 0.0, 'd': 0.0 }
originArray = [ 0.0, 0.0, 0.0, 0.0 ]
dsbInput = { 'c': ( (4.88897559E+00) ),
             'a': ( 0 ),
             'b': ( 0 ),
             'd': ( (2.44448779E+02) ) }


def FieldDictionaryToArray( fieldValueDictionary ):
    return numpy.array( [ fieldValueDictionary[ 'c' ],
                          fieldValueDictionary[ 'a' ],
                          fieldValueDictionary[ 'b' ],
                          fieldValueDictionary[ 'd' ] ] )


def FieldArrayToDictionary( fieldValueArray ):
    return { 'c': fieldValueArray[ 0 ],
             'a': fieldValueArray[ 1 ],
             'b': fieldValueArray[ 2 ],
             'd': fieldValueArray[ 3 ] }


def UserFieldsAsMathematica( fieldValueDictionary ):
    return ( "{ vd -> ( "
             + str( fieldValueDictionary[ 'c' ] )
                 + " ), vQ3 -> ( "
             + str( fieldValueDictionary[ 'a' ] )
                 + " ), vT3 -> ( "
             + str( fieldValueDictionary[ 'b' ] )
                 + " ), vu -> ( "
             + str( fieldValueDictionary[ 'd' ] )
                 + " ) }" )


def UserFieldsAsXml( fieldValueDictionary ):
    return ( "vd=\""
               + str( fieldValueDictionary[ 'c' ] ) + "\" vQ3=\""
               + str( fieldValueDictionary[ 'a' ] ) + "\" vT3=\""
               + str( fieldValueDictionary[ 'b' ] ) + "\" vu=\""
               + str( fieldValueDictionary[ 'd' ] ) + "\"" )


def FunctionFromDictionary( FunctionFromArguments,
                            fieldValueDictionary,
                            givenTemperatureValue = 0.0 ):
    return FunctionFromArguments( c = fieldValueDictionary[ 'c' ], 
                                  a = fieldValueDictionary[ 'a' ], 
                                  b = fieldValueDictionary[ 'b' ], 
                                  d = fieldValueDictionary[ 'd' ], 
                                  temperatureValue = givenTemperatureValue )


def FunctionFromArray( FunctionFromArguments,
                       fieldArray,
                       givenTemperatureValue = 0.0 ):
    return FunctionFromArguments( c = fieldArray[ 0 ],
                                  a = fieldArray[ 1 ],
                                  b = fieldArray[ 2 ],
                                  d = fieldArray[ 3 ],
                                  temperatureValue = givenTemperatureValue )


def LengthSquaredOfMinimum( givenMinimum ):
    return numpy.sum( (FieldDictionaryToArray( givenMinimum[
                                                  "FieldValues" ] ))**2 )


# MINUIT's hesse() function assumes that it is already at a
# minimum, but we need to check whether it actually stopped at a
# saddle point, so we need to work out the Hessian matrix ourselves.
def NumericalHessian( inputFunction, fieldValueDictionary ):
    numberOfFields = len( fieldValueDictionary )
    returnHessian = [ [ 0.0 for fieldIndexOne in range( numberOfFields ) ]
                             for fieldIndexTwo in range( numberOfFields ) ]
    for fieldIndexOne in range( numberOfFields ):
        firstPoint = fieldValueDictionary.copy()
        firstPoint[ namesOfFields[ fieldIndexOne ] ] -= numericalStepSize
        firstDifference = ( FunctionFromDictionary( inputFunction,
                                                    fieldValueDictionary )
                            - FunctionFromDictionary( inputFunction,
                                                      firstPoint ) )
        for fieldIndexTwo in range( fieldIndexOne, numberOfFields ):
            secondPoint = fieldValueDictionary.copy()
            secondPoint[ namesOfFields[ fieldIndexTwo
                                                   ] ] += numericalStepSize
            doubleOffset = secondPoint.copy()
            doubleOffset[ namesOfFields[ fieldIndexOne
                                                   ] ] -= numericalStepSize
            returnHessian[ fieldIndexOne ][ fieldIndexTwo
                             ] = ( ( FunctionFromDictionary( inputFunction,
                                                             secondPoint )
                                   - FunctionFromDictionary( inputFunction,
                                                             doubleOffset )
                                     - firstDifference )
                              / ( numericalStepSize * numericalStepSize ) )
            returnHessian[ fieldIndexTwo ][ fieldIndexOne
                        ] = returnHessian[ fieldIndexOne ][ fieldIndexTwo ]
    return returnHessian


def MassSquaredCorrections( massSquaredValues,
                            overallFactor,
                            subtractionConstant ):
    summedCorrection = 0.0
    for massSquaredValue in massSquaredValues:
        massSquaredMagnitude = abs( massSquaredValue )
        if( massSquaredMagnitude > 1.0 ):
            summedCorrection += ( massSquaredMagnitude
                                  * massSquaredMagnitude
                                  * ( math.log( massSquaredMagnitude
                                                * inverseScaleSquared )
                                      - subtractionConstant ) )
    return ( overallFactor * summedCorrection )

loopFactor = ( 1.0 / ( 64.0 * math.pi * math.pi ) )


# The following are approximations to the J_{+} & J_{-} functions:
# J_{+}( r ) = integral from 0 to infinity by dx of
# x^2 ln( 1 - exp( -sqrt( x^2 + r^2 ) ) )
# J_{-}( r ) = integral from 0 to infinity by dx of
# x^2 ln( 1 + exp( -sqrt( x^2 + r^2 ) ) )
# A bosonic degree of freedom (real scalar, so complex scalars count
# twice!) uses +J_{+}, while a fermionic degree of freedom uses -J_{-} (and
# counts 2 degrees of freedom per Weyl fermion, so e.g. tops at the SM
# minimum count 12 times = 3 colors * 2 chiralities * 2 for complex
# conjugation). The function ThermalFunction returns -J_{-}, so should be
# added to the potential, not subtracted, i.e. ThermalFunction's return
# value should always be added, multiplied by the positive of the number of
# degrees of freedom, regardless of whether it is for a boson or a fermion,
# as it internally accounts for the sign of the spin statistics, but not
# the absolute number of degrees of freedom!

explicitEulerGamma = 0.577215661901532
bosonLowA = ( ( -1.0 * (math.pi)**4 ) / 45.0 )
bosonLowB = ( ( 1.0 * (math.pi)**2 ) / 12.0 )
bosonLowC = ( ( -1.0 * math.pi ) / 6.0 )
bosonLowD = ( -1.0 / 16.0 )
bosonLowLog = ( 0.75 - explicitEulerGamma
                     + math.log( 4.0 * math.pi ) )

def LowRatioBosonApproximation( massOverTemperature ):
    returnValue = bosonLowA
    if ( massOverTemperature > 0.0 ):
        returnValue += ( massOverTemperature**2
                         * ( bosonLowB
                             + ( massOverTemperature
                                 * ( bosonLowC
                                     + ( bosonLowD
                                         * massOverTemperature
                                        * ( math.log( massOverTemperature )
                                             - bosonLowLog ) ) ) ) ) )
    return returnValue


fermionLowA = ( ( -7.0 * (math.pi)**4 ) / 360.0 )
fermionLowB = ( ( 1.0 * (math.pi)**2 ) / 24.0 )
fermionLowD = ( 1.0 / 16.0 )
fermionLowLog = ( 0.75 - explicitEulerGamma
                       + math.log( math.pi ) )

def LowRatioFermionApproximation( massOverTemperature ):
    returnValue = fermionLowA
    if ( massOverTemperature > 0.0 ):
        returnValue += ( massOverTemperature**2
                         * ( fermionLowB
                         + ( fermionLowD
                             * massOverTemperature**2
                             * ( math.log( massOverTemperature )
                                           - fermionLowLog ) ) ) )
    return returnValue


# In the approximation we work to, the high-ratio (low-temperature)
# approximation is the same for both bosons and fermions.
def HighRatioApproximation( massOverTemperature ):
    return ( -1.0 * massOverTemperature**2
             * scipy.special.kn( 2, massOverTemperature ) )

# The function for intermediate ratios is chosen as a linear interpolation.
# The low-ratio approximations are surprisingly accurate up to 1.0!
lowerKinkRatio = 1.0
lowerKinkBoson = LowRatioBosonApproximation( lowerKinkRatio )
lowerKinkFermion = LowRatioFermionApproximation( lowerKinkRatio )
# The high-ratio approximation is not as good, though is within 3% by 2.5:
upperKinkRatio = 2.5
upperKinkValue = HighRatioApproximation( upperKinkRatio )
slopeBoson = ( ( upperKinkValue - lowerKinkBoson )
               / ( upperKinkRatio - lowerKinkRatio ) )
interceptBoson = ( lowerKinkBoson - ( slopeBoson * lowerKinkRatio ) )
slopeFermion = ( ( upperKinkValue - lowerKinkFermion )
                 / ( upperKinkRatio - lowerKinkRatio ) )
interceptFermion = ( lowerKinkFermion - ( slopeFermion * lowerKinkRatio ) )

def IntermediateRatioBosonApproximation( massOverTemperature ):
    return ( ( slopeBoson * massOverTemperature ) + interceptBoson )

def IntermediateRatioFermionApproximation( massOverTemperature ):
    return ( ( slopeFermion * massOverTemperature ) + interceptFermion )

thermalInterpolationResolution = 100
# negativeBosonThermalFunctionValues is a list of length 102 (entries from
# [0] to [101]) with values for negative m^2/T^2 ratios for
# J_{+}( m^2/T^2 ) calculated with Mathematica.
negativeBosonThermalFunctionValues = [ bosonLowA,
-2.4584,
-2.70421,
-2.90927,
-3.07928,
-3.21499,
-3.32186,
-3.39489,
-3.45454,
-3.4678,
-3.46382,
-3.44076,
-3.39106,
-3.32473,
-3.23573,
-3.13883,
-2.99525,
-2.84771,
-2.68783,
-2.5113,
-2.31497,
-2.10299,
-1.86926,
-1.62777,
-1.37701,
-1.13041,
-0.84233,
-0.564025,
-0.251039,
0.0627693,
0.394232,
0.72439,
1.07055,
1.40908,
1.74135,
2.13272,
2.48344,
2.88792,
3.25922,
3.64481,
4.04158,
4.45061,
4.82576,
5.24276,
5.6749,
6.09947,
6.51899,
6.92073,
7.21596,
7.76782,
8.17944,
8.62316,
9.05358,
9.44169,
9.85741,
10.2806,
10.6692,
11.0742,
11.2484,
11.7149,
12.3143,
12.6849,
13.0811,
13.3769,
13.7479,
14.2238,
14.4005,
14.79,
15.2596,
15.5625,
15.9033,
16.0921,
16.3906,
16.7547,
16.9901,
17.1289,
17.3856,
17.7084,
17.9363,
17.9533,
18.1325,
18.3552,
18.4859,
18.5357,
18.5249,
18.5048,
18.622,
18.4414,
18.6183,
18.5074,
18.4496,
18.1623,
17.8825,
17.6903,
17.4322,
16.8687,
16.6486,
15.5867,
15.4747,
14.7538,
13.8882,
0.0 ] # Last entry ([101]) is 0 for kludge for high ratios.
# negativeFermionThermalFunctionValues is a list of length 102 (entries
# from [0] to [101]) with values for negative m^2/T^2 ratios for
# J_{+}( m^2/T^2 ) calculated with Mathematica.
negativeFermionThermalFunctionValues = [ fermionLowA,
-2.07364,
-2.27358,
-2.48534,
-2.70391,
-2.92541,
-3.14658,
-3.36491,
-3.57624,
-3.77925,
-3.97078,
-4.14835,
-4.30904,
-4.45004,
-4.56835,
-4.66085,
-4.7235,
-4.75264,
-4.74345,
-4.69105,
-4.58813,
-4.4273,
-4.19694,
-3.88134,
-3.45309,
-2.83773,
-1.98787,
-1.16561,
-0.36077,
0.406634,
1.15178,
1.87767,
2.571,
3.2662,
3.89582,
4.52003,
5.12808,
5.70342,
6.27452,
6.80631,
7.34613,
7.80949,
8.27843,
8.73792,
9.20238,
9.6278,
9.97677,
10.2511,
10.6802,
11.0228,
11.381,
11.6809,
11.9586,
12.185,
12.4718,
12.6165,
12.8352,
13.0107,
13.2081,
13.4074,
13.5214,
13.68,
13.7295,
13.844,
13.9108,
13.9615,
13.9883,
14.0893,
14.0869,
14.0305,
14.0015,
13.9733,
14.0218,
14.1443,
13.8104,
13.7344,
13.6113,
13.4642,
13.339,
13.0696,
13.2315,
13.2977,
12.8528,
13.2042,
12.7854,
12.1753,
11.9947,
11.7797,
11.8132,
11.4267,
10.993,
11.0223,
10.6826,
10.103,
9.8427,
9.46677,
9.40834,
9.15316,
8.51647,
8.1202,
8.22949,
0.0 ] # Last entry ([101]) is 0 for kludge for high ratios.
largestSquareRatioMagnitude = ( 2.0 * math.pi )**2
negativeThermalInterpolationStepWidth = ( 0.01
                                          * largestSquareRatioMagnitude )

def NegativeThermalFunction( squareRatio, interpolationList ):
    scaledRatio = ( abs( squareRatio * 100.0 )
                    / largestSquareRatioMagnitude )
    if ( scaledRatio > 100.0 ):
        if False:
          print( "Warning! Thermal function called with negative ratio"
                 + " of m^2/T^2 with very large magnitude ("
                 + str( squareRatio )
                 + "). The interpolation function only goes to"
                 + " -(2 pi)^2, and 0.0 will be returned, as the"
                 + " relative contribution of the thermal term for this"
                 + " degree of freedom should be negligible compared to"
                 + " the tree-level part for such a large value of"
                 + " |m^2/T^2|." )
        if ( scaledRatio > 101.0 ):
            scaledRatio = 100.9
# The indices looked for are capped to [100] and [101], which is fine as
# the lists are 102 elements long.
    ratioFloor = math.floor( scaledRatio )
    floorIndex = int( ratioFloor )
    ratioRemainder = ( scaledRatio - ratioFloor )
    constantValue = interpolationList[ floorIndex ]
    slopeValue = ( ( interpolationList[ floorIndex + 1 ] - constantValue )
                   / negativeThermalInterpolationStepWidth )
    return ( ( interpolationList[ floorIndex ] * ( 1.0 - ratioRemainder ) )
             + ( interpolationList[ floorIndex + 1 ] * ratioRemainder ) )



# The function ThermalFunction returns -J_{-} or +J{+}, so should be added
# to the potential regardless of whether the degree of freedom is
# bosonic (+) or fermionic (-): i.e. for n bosons of the same mass-squared,
# add +n * ThermalFunction, while for n fermions of the same mass-squared,
# add +n * ThermalFunction.
def ThermalFunction( massSquared,
                     temperatureSquared,
                     signedDegreesOfFreedom ):
    if ( massSquared < 0.0 ):
        if ( signedDegreesOfFreedom < 0 ):
            return NegativeThermalFunction( ( massSquared
                                              / temperatureSquared ),
                                     negativeFermionThermalFunctionValues )
        else:
            return NegativeThermalFunction( ( massSquared
                                              / temperatureSquared ),
                                       negativeBosonThermalFunctionValues )
    else:
        massOverTemperature = math.sqrt( massSquared / temperatureSquared )
        if ( massOverTemperature > upperKinkRatio ):
            return HighRatioApproximation( massOverTemperature )
        else:
            if ( massOverTemperature < lowerKinkRatio ):
                if ( signedDegreesOfFreedom < 0 ):
                    return LowRatioFermionApproximation(
                                                      massOverTemperature )
                else:
                    return LowRatioBosonApproximation(
                                                      massOverTemperature )
            else:
                if ( signedDegreesOfFreedom < 0 ):
                    return IntermediateRatioFermionApproximation(
                                                      massOverTemperature )
                else:
                    return IntermediateRatioBosonApproximation(
                                                      massOverTemperature )


def ThermalCorrections( massSquaredValues,
                        overallFactor,
                        temperatureSquared ):
    thermalCorrection = 0.0
    for massSquaredValue in massSquaredValues:
        thermalCorrection += ThermalFunction( massSquaredValue.real,
                                              temperatureSquared,
                                              overallFactor )
    return ( abs( overallFactor ) * thermalCorrection )


def AbsThermalCorrections( massSquaredValues,
                           overallFactor,
                           temperatureSquared ):
    thermalCorrection = 0.0
    for massSquaredValue in massSquaredValues:
        thermalCorrection += ThermalFunction( abs( massSquaredValue.real ),
                                              temperatureSquared,
                                              overallFactor )
    return ( abs( overallFactor ) * thermalCorrection )


def FloorThermalCorrections( massSquaredValues,
                             overallFactor,
                             temperatureSquared ):
    thermalCorrection = 0.0
    for massSquaredValue in massSquaredValues:
        massSquared = massSquaredValue.real
        if ( massSquared < 0.0 ):
            massSquared = 0.0
        thermalCorrection += ThermalFunction( massSquared,
                                              temperatureSquared,
                                              overallFactor )
    return ( abs( overallFactor ) * thermalCorrection )


thermalFactor = ( 1.0 / ( 2.0 * math.pi * math.pi ) )

def TreeLevelPotential( a, b, c, d, temperatureValue = 0.0 ):
    return ( (0.03125*c**4*(3.62100856E-01)**2)   + (-0.020833333333333332*c**2*a**2*(3.62100856E-01)**2)   + (0.003472222222222222*a**4*(3.62100856E-01)**2)   + (0.08333333333333333*c**2*b**2*(3.62100856E-01)**2)   + (-0.027777777777777776*a**2*b**2*(3.62100856E-01)**2)   + (0.05555555555555555*b**4*(3.62100856E-01)**2)   + (-0.0625*c**2*d**2*(3.62100856E-01)**2)   + (0.020833333333333332*a**2*d**2*(3.62100856E-01)**2)   + (-0.08333333333333333*b**2*d**2*(3.62100856E-01)**2)   + (0.03125*d**4*(3.62100856E-01)**2)   + (0.03125*c**4*(6.38811127E-01)**2)   + (0.0625*c**2*a**2*(6.38811127E-01)**2)   + (0.03125*a**4*(6.38811127E-01)**2)   + (-0.0625*c**2*d**2*(6.38811127E-01)**2)   + (-0.0625*a**2*d**2*(6.38811127E-01)**2)   + (0.03125*d**4*(6.38811127E-01)**2)   + (0.041666666666666664*a**4*(1.06083369E+00)**2)   + (-0.08333333333333333*a**2*b**2*(1.06083369E+00)**2)   + (0.041666666666666664*b**4*(1.06083369E+00)**2)   + (0.5*c**2*(1.00000000E+03)**2)   + (0.5*d**2*(1.00000000E+03)**2)   + (-1.*c*d*(1.99920032E+04))   + (0.5*c**2*(3.62602505E+03))   + (0.5*d**2*(-1.00362603E+06))   + (0.5*a**2*(1.00000000E+06))   + (0.5*b**2*(1.00000000E+06))   + (0.7071067811865475*a*b*d*(1.70432267E+01))   + (0.25*a**2*d**2*(0.00000000E+00)**2)   + (0.25*a**2*d**2*(0.00000000E+00)**2)   + (0.25*b**2*d**2*(0.00000000E+00)**2)   + (0.25*b**2*d**2*(0.00000000E+00)**2)   + (-0.7071067811865475*c*a*b*(1.00000000E+03)*(8.52161333E-01))   + (0.25*a**2*b**2*(8.52161333E-01)**2)   + (0.25*a**2*d**2*(8.52161333E-01)**2)   + (0.25*b**2*d**2*(8.52161333E-01)**2) )

def PolynomimalPartOfPotential( a, b, c, d ):
    return ( (0.03125*c**4*(3.62100856E-01)**2)   + (-0.020833333333333332*c**2*a**2*(3.62100856E-01)**2)   + (0.003472222222222222*a**4*(3.62100856E-01)**2)   + (0.08333333333333333*c**2*b**2*(3.62100856E-01)**2)   + (-0.027777777777777776*a**2*b**2*(3.62100856E-01)**2)   + (0.05555555555555555*b**4*(3.62100856E-01)**2)   + (-0.0625*c**2*d**2*(3.62100856E-01)**2)   + (0.020833333333333332*a**2*d**2*(3.62100856E-01)**2)   + (-0.08333333333333333*b**2*d**2*(3.62100856E-01)**2)   + (0.03125*d**4*(3.62100856E-01)**2)   + (0.03125*c**4*(6.38811127E-01)**2)   + (0.0625*c**2*a**2*(6.38811127E-01)**2)   + (0.03125*a**4*(6.38811127E-01)**2)   + (-0.0625*c**2*d**2*(6.38811127E-01)**2)   + (-0.0625*a**2*d**2*(6.38811127E-01)**2)   + (0.03125*d**4*(6.38811127E-01)**2)   + (0.041666666666666664*a**4*(1.06083369E+00)**2)   + (-0.08333333333333333*a**2*b**2*(1.06083369E+00)**2)   + (0.041666666666666664*b**4*(1.06083369E+00)**2)   + (0.5*c**2*(1.00000000E+03)**2)   + (0.5*d**2*(1.00000000E+03)**2)   + (-1.*c*d*(1.99920032E+04))   + (0.5*c**2*(5.71005656E+03))   + (0.5*d**2*(-9.87116981E+05))   + (0.5*a**2*(1.00000000E+06))   + (0.5*b**2*(1.00000000E+06))   + (0.7071067811865475*a*b*d*(1.70432267E+01))   + (0.25*a**2*d**2*(0.00000000E+00)**2)   + (0.25*a**2*d**2*(0.00000000E+00)**2)   + (0.25*b**2*d**2*(0.00000000E+00)**2)   + (0.25*b**2*d**2*(0.00000000E+00)**2)   + (-0.7071067811865475*c*a*b*(1.00000000E+03)*(8.52161333E-01))   + (0.25*a**2*b**2*(8.52161333E-01)**2)   + (0.25*a**2*d**2*(8.52161333E-01)**2)   + (0.25*b**2*d**2*(8.52161333E-01)**2) )

# The masses-squared from this function are in GeV^2:
def MassesSquared1( a, b, c, d ):
    massSquaredElementArray = numpy.array( [  ( (0.375*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.375*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(3.62602505E+03)) ),  ( (-0.25*c*d*(3.62100856E-01)**2-0.25*c*d*(6.38811127E-01)**2-1.*(1.99920032E+04)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c*a*(3.62100856E-01)**2+0.25*c*a*(6.38811127E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.3333333333333333*c*b*(3.62100856E-01)**2-0.7071067811865475*a*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*c*d*(3.62100856E-01)**2-0.25*c*d*(6.38811127E-01)**2-1.*(1.99920032E+04)) ),  ( (-0.125*c**2*(3.62100856E-01)**2+0.041666666666666664*a**2*(3.62100856E-01)**2-0.16666666666666666*b**2*(3.62100856E-01)**2+0.375*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.375*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(-1.00362603E+06)+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*a**2*(8.52161333E-01)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*b*(0.00000000E+00)+a*d*(6.93214053E-06)*(0.00000000E+00)+a*d*(0.00000000E+00)*(0.00000000E+00)+a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*b*(0.00000000E+00)+a*d*(0.00000000E+00)*(0.00000000E+00)+a*d*(3.52152853E-03)*(0.00000000E+00)+a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.08333333333333333*a*d*(3.62100856E-01)**2-0.25*a*d*(6.38811127E-01)**2+0.7071067811865475*b*(1.70432267E+01)+a*d*(0.00000000E+00)**2+a*d*(0.00000000E+00)**2+a*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(0.00000000E+00)+b*d*(6.93214053E-06)*(0.00000000E+00)+b*d*(0.00000000E+00)*(0.00000000E+00)+b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*a*(0.00000000E+00)+b*d*(0.00000000E+00)*(0.00000000E+00)+b*d*(3.52152853E-03)*(0.00000000E+00)+b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.3333333333333333*b*d*(3.62100856E-01)**2+0.7071067811865475*a*(1.70432267E+01)+b*d*(0.00000000E+00)**2+b*d*(0.00000000E+00)**2+b*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)+0.5*c**2*(1.59497772E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.7071067811865475*c*(3.18995543E-03)-0.7071067811865475*d*(1.00000000E+03)*(1.59497772E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*dc**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(3.29791942E-02)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(6.59583883E-01)-0.7071067811865475*d*(1.00000000E+03)*(3.29791942E-02)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*dc**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.55101987E-01)**2) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.11020397E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(3.18995543E-03)-0.7071067811865475*d*(1.00000000E+03)*(1.59497772E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.25*c**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(3.62100856E-01)**2-0.3333333333333333*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+06)+0.5*c**2*(1.59497772E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(6.59583883E-01)-0.7071067811865475*d*(1.00000000E+03)*(3.29791942E-02)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.25*c**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(3.62100856E-01)**2-0.3333333333333333*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(3.29791942E-02)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.11020397E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.55101987E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (-0.25*c**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(3.62100856E-01)**2-0.3333333333333333*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.55101987E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.125*c**2*(3.62100856E-01)**2+0.041666666666666664*a**2*(3.62100856E-01)**2-0.16666666666666666*b**2*(3.62100856E-01)**2+0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(-1.00362603E+06)+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.25*c*d*(6.38811127E-01)**2+(1.99920032E+04)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(0.00000000E+00)-0.5*a*d*(6.93214053E-06)*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*b*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(0.00000000E+00)-0.5*a*d*(3.52152853E-03)*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.25*a*d*(6.38811127E-01)**2-0.7071067811865475*b*(1.70432267E+01)-0.5*a*d*(0.00000000E+00)**2-0.5*a*d*(0.00000000E+00)**2-0.5*a*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(5.10999944E-04)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(9.70899485E-03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(5.00087495E-01)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*c*d*(6.38811127E-01)**2+(1.99920032E+04)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(3.62602505E+03)+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*c*a*(5.10999944E-04)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(9.70899485E-03)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.25*c*a*(6.38811127E-01)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(5.00087495E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(5.10999944E-04)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(9.70899485E-03)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00017499E+01)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*b*(0.00000000E+00)+a*d*(6.93214053E-06)*(0.00000000E+00)+a*d*(0.00000000E+00)*(0.00000000E+00)+a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*b*(0.00000000E+00)+a*d*(0.00000000E+00)*(0.00000000E+00)+a*d*(3.52152853E-03)*(0.00000000E+00)+a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*b**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c*a*(3.62100856E-01)**2+0.25*c*a*(6.38811127E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.08333333333333333*a*d*(3.62100856E-01)**2-0.25*a*d*(6.38811127E-01)**2+0.7071067811865475*b*(1.70432267E+01)+a*d*(0.00000000E+00)**2+a*d*(0.00000000E+00)**2+a*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.041666666666666664*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.375*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.5*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*b**2*(8.52161333E-01)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.1111111111111111*a*b*(3.62100856E-01)**2-0.3333333333333333*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(0.00000000E+00)+b*d*(6.93214053E-06)*(0.00000000E+00)+b*d*(0.00000000E+00)*(0.00000000E+00)+b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(0.00000000E+00)+b*d*(0.00000000E+00)*(0.00000000E+00)+b*d*(3.52152853E-03)*(0.00000000E+00)+b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*a**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.3333333333333333*c*b*(3.62100856E-01)**2-0.7071067811865475*a*(1.00000000E+03)*(8.52161333E-01)) ),  ( (-0.3333333333333333*b*d*(3.62100856E-01)**2+0.7071067811865475*a*(1.70432267E+01)+b*d*(0.00000000E+00)**2+b*d*(0.00000000E+00)**2+b*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.1111111111111111*a*b*(3.62100856E-01)**2-0.3333333333333333*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.6666666666666666*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.5*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*a**2*(8.52161333E-01)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(0.00000000E+00)-0.5*a*d*(6.93214053E-06)*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.5*c*a*(5.10999944E-04)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(0.00000000E+00)-0.5*a*d*(3.52152853E-03)*(0.00000000E+00)-0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(9.70899485E-03)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a*d*(6.38811127E-01)**2-0.7071067811865475*b*(1.70432267E+01)-0.5*a*d*(0.00000000E+00)**2-0.5*a*d*(0.00000000E+00)**2-0.5*a*d*(8.52161333E-01)**2) ),  ( (0.25*c*a*(6.38811127E-01)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(5.00087495E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(5.10999944E-04)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(5.10999944E-04)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(9.70899485E-03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(9.70899485E-03)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(5.00087495E-01)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(5.00087495E-01)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00017499E+01)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2+0.5*a**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ) ] )
    massSquaredMatrix = massSquaredElementArray.reshape( int(math.sqrt(
                                       massSquaredElementArray.size )), -1 )
    return numpy.linalg.eigvalsh( massSquaredMatrix )

# The masses-squared from this function are in GeV^2:
def MassesSquared2( a, b, c, d ):
    massSquaredElementArray = numpy.array( [  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(3.62602505E+03)) ),  ( ((1.99920032E+04)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((1.99920032E+04)) ),  ( (-0.125*c**2*(3.62100856E-01)**2+0.041666666666666664*a**2*(3.62100856E-01)**2-0.16666666666666666*b**2*(3.62100856E-01)**2+0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(-1.00362603E+06)+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*a**2*(8.52161333E-01)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.70432267E+01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(1.70432267E+01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)+0.5*c**2*(1.59497772E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.7071067811865475*c*(3.18995543E-03)-0.7071067811865475*d*(1.00000000E+03)*(1.59497772E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(3.29791942E-02)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(6.59583883E-01)-0.7071067811865475*d*(1.00000000E+03)*(3.29791942E-02)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*dc**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.55101987E-01)**2) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.11020397E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(3.18995543E-03)-0.7071067811865475*d*(1.00000000E+03)*(1.59497772E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.25*c**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(3.62100856E-01)**2-0.3333333333333333*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+06)+0.5*c**2*(1.59497772E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(6.59583883E-01)-0.7071067811865475*d*(1.00000000E+03)*(3.29791942E-02)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.25*c**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(3.62100856E-01)**2-0.3333333333333333*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(3.29791942E-02)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.11020397E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.55101987E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (-0.25*c**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(3.62100856E-01)**2-0.3333333333333333*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.55101987E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+(1.00000000E+06)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.125*c**2*(3.62100856E-01)**2+0.041666666666666664*a**2*(3.62100856E-01)**2-0.16666666666666666*b**2*(3.62100856E-01)**2+0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(-1.00362603E+06)+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (-0.25*c*d*(6.38811127E-01)**2-1.*(1.99920032E+04)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*b*(0.00000000E+00)+0.5*a*d*(6.93214053E-06)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*b*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(3.52152853E-03)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*d*(6.38811127E-01)**2+0.7071067811865475*b*(1.70432267E+01)+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)+0.5*c*b*(5.10999944E-04)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(9.70899485E-03)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(5.00087495E-01)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*c*d*(6.38811127E-01)**2-1.*(1.99920032E+04)) ),  ( (0.125*c**2*(3.62100856E-01)**2-0.041666666666666664*a**2*(3.62100856E-01)**2+0.16666666666666666*b**2*(3.62100856E-01)**2-0.125*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+(3.62602505E+03)+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*c*a*(5.10999944E-04)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(9.70899485E-03)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.25*c*a*(6.38811127E-01)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(5.00087495E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(5.10999944E-04)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(9.70899485E-03)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00017499E+01)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*b**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (-0.7071067811865475*b*(1.70432267E+01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*b**2*(8.52161333E-01)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2+0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2-0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*a*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)-0.5*a*b*(0.00000000E+00)*(0.00000000E+00)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*a**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.7071067811865475*a*(1.70432267E+01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*a**2*(8.52161333E-01)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(1.38642811E-04)-0.7071067811865475*c*(1.00000000E+03)*(6.93214053E-06)+0.5*a*b*(6.93214053E-06)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(7.04305705E-02)-0.7071067811865475*c*(1.00000000E+03)*(3.52152853E-03)+0.5*a*b*(3.52152853E-03)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.7071067811865475*d*(0.00000000E+00)-0.7071067811865475*c*(1.00000000E+03)*(0.00000000E+00)+0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.25*a*b*(1.06083369E+00)**2+0.7071067811865475*d*(1.70432267E+01)-0.7071067811865475*c*(1.00000000E+03)*(8.52161333E-01)+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.16666666666666666*c**2*(3.62100856E-01)**2-0.05555555555555555*a**2*(3.62100856E-01)**2+0.2222222222222222*b**2*(3.62100856E-01)**2-0.16666666666666666*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*b*(0.00000000E+00)+0.5*a*d*(6.93214053E-06)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.5*c*a*(5.10999944E-04)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*b*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(3.52152853E-03)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(9.70899485E-03)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*a*d*(6.38811127E-01)**2+0.7071067811865475*b*(1.70432267E+01)+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(8.52161333E-01)**2) ),  ( (0.25*c*a*(6.38811127E-01)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(5.00087495E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2+0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2+0.16666666666666666*a**2*(1.06083369E+00)**2-0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.041666666666666664*c**2*(3.62100856E-01)**2+0.013888888888888888*a**2*(3.62100856E-01)**2-0.05555555555555555*b**2*(3.62100856E-01)**2+0.041666666666666664*d**2*(3.62100856E-01)**2-0.125*c**2*(6.38811127E-01)**2-0.125*a**2*(6.38811127E-01)**2+0.125*d**2*(6.38811127E-01)**2-0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)+0.5*c*b*(5.10999944E-04)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(5.10999944E-04)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(9.70899485E-03)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(9.70899485E-03)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*a*(1.00000000E+03)*(5.00087495E-01)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(0.00000000E+00)*(0.00000000E+00)+0.5*c*b*(5.00087495E-01)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00017499E+01)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(0.00000000E+00)*(0.00000000E+00)-0.5*b*d*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2-0.16666666666666666*a**2*(1.06083369E+00)**2+0.16666666666666666*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2+0.5*a**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(1.02199989E-02)-0.7071067811865475*d*(1.00000000E+03)*(5.10999944E-04)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.94179897E-01)-0.7071067811865475*d*(1.00000000E+03)*(9.70899485E-03)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(0.00000000E+00)-0.7071067811865475*d*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.7071067811865475*c*(1.00017499E+01)-0.7071067811865475*d*(1.00000000E+03)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*(0.00000000E+00)+0.5*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (-0.08333333333333333*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2-0.1111111111111111*b**2*(3.62100856E-01)**2+0.08333333333333333*d**2*(3.62100856E-01)**2+0.08333333333333333*a**2*(1.06083369E+00)**2-0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+06)+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ) ] )
    massSquaredMatrix = massSquaredElementArray.reshape( int(math.sqrt(
                                       massSquaredElementArray.size )), -1 )
    return numpy.linalg.eigvalsh( massSquaredMatrix )

# The masses-squared from this function are in GeV^2:
def MassesSquared3( a, b, c, d ):
    massSquaredElementArray = numpy.array( [  ( (0.25*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2+0.4444444444444444*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2+(1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*c**2*(3.62100856E-01)*(6.38811127E-01)+0.08333333333333333*a**2*(3.62100856E-01)*(6.38811127E-01)-0.25*d**2*(3.62100856E-01)*(6.38811127E-01)) ),  ( (-0.5*d*(3.62100856E-01)*(1.00000000E+03)-0.5*c*(3.62100856E-01)*(1.00000000E+03)) ),  ( (0.5*c*(3.62100856E-01)*(1.00000000E+03)+0.5*d*(3.62100856E-01)*(1.00000000E+03)-0.35355339059327373*a*b*(3.62100856E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.08333333333333333*a**2*(3.62100856E-01)*(1.06083369E+00)+0.3333333333333333*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.048112522432468816*a**2*(3.62100856E-01)*(1.06083369E+00)+0.19245008972987526*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.4714045207910317*a*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (0.4714045207910317*a*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (-0.6666666666666666*b*(3.62100856E-01)*(1.00000000E+03)+0.4714045207910317*a*d*(3.62100856E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.1178511301977579*b*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (-0.1178511301977579*b*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (0.16666666666666666*a*(3.62100856E-01)*(1.00000000E+03)-0.1178511301977579*b*d*(3.62100856E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*c**2*(6.38811127E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.25*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2) ),  ( ((0.+0.25*(1.0j))*c**2*(6.38811127E-01)**2+(0.+0.25*(1.0j))*a**2*(6.38811127E-01)**2-(0.+0.25*(1.0j))*d**2*(6.38811127E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d*(6.38811127E-01)*(1.00000000E+03)+0.5*c*(6.38811127E-01)*(1.00000000E+03)) ),  ( (0.5*c*(6.38811127E-01)*(1.00000000E+03)+0.5*d*(6.38811127E-01)*(1.00000000E+03)-0.35355339059327373*a*b*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (0.5*a*(6.38811127E-01)*(1.00000000E+03)-0.35355339059327373*b*d*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.25*(1.0j))*c**2*(6.38811127E-01)**2-(0.+0.25*(1.0j))*a**2*(6.38811127E-01)**2+(0.+0.25*(1.0j))*d**2*(6.38811127E-01)**2) ),  ( (0.25*c**2*(6.38811127E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.25*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.+0.5*(1.0j))*d*(6.38811127E-01)*(1.00000000E+03)+(0.+0.5*(1.0j))*c*(6.38811127E-01)*(1.00000000E+03)) ),  ( ((0.-0.5*(1.0j))*c*(6.38811127E-01)*(1.00000000E+03)-(0.+0.5*(1.0j))*d*(6.38811127E-01)*(1.00000000E+03)+(0.+0.35355339059327373*(1.0j))*a*b*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.35355339059327373*(1.0j))*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( ((0.-0.35355339059327373*(1.0j))*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( ((0.+0.5*(1.0j))*a*(6.38811127E-01)*(1.00000000E+03)-(0.+0.35355339059327373*(1.0j))*b*d*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*c**2*(3.62100856E-01)*(6.38811127E-01)+0.08333333333333333*a**2*(3.62100856E-01)*(6.38811127E-01)-0.25*d**2*(3.62100856E-01)*(6.38811127E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.25*c**2*(6.38811127E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.25*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2) ),  ( (0.5*d*(6.38811127E-01)*(1.00000000E+03)+0.5*c*(6.38811127E-01)*(1.00000000E+03)) ),  ( (-0.5*c*(6.38811127E-01)*(1.00000000E+03)-0.5*d*(6.38811127E-01)*(1.00000000E+03)+0.35355339059327373*a*b*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (0.5*a*(6.38811127E-01)*(1.00000000E+03)-0.35355339059327373*b*d*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*d*(3.62100856E-01)*(1.00000000E+03)-0.5*c*(3.62100856E-01)*(1.00000000E+03)) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d*(6.38811127E-01)*(1.00000000E+03)+0.5*c*(6.38811127E-01)*(1.00000000E+03)) ),  ( (0.25*c**2*(3.62100856E-01)**2+0.25*c**2*(6.38811127E-01)**2+(1.00000000E+03)**2) ),  ( (-0.25*c*d*(3.62100856E-01)**2-0.25*c*d*(6.38811127E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.3333333333333333*c*b*(3.62100856E-01)**2-0.7071067811865475*a*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.08333333333333333*c*a*(3.62100856E-01)**2+0.25*c*a*(6.38811127E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c*(3.62100856E-01)*(1.00000000E+03)+0.5*d*(3.62100856E-01)*(1.00000000E+03)-0.35355339059327373*a*b*(3.62100856E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*c*(6.38811127E-01)*(1.00000000E+03)-0.5*d*(6.38811127E-01)*(1.00000000E+03)+0.35355339059327373*a*b*(6.38811127E-01)*(8.52161333E-01)) ),  ( (-0.25*c*d*(3.62100856E-01)**2-0.25*c*d*(6.38811127E-01)**2) ),  ( (0.25*d**2*(3.62100856E-01)**2+0.25*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*a**2*(8.52161333E-01)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*b*d*(6.93214053E-06)*(0.00000000E+00)+0.5*b*d*(0.00000000E+00)*(0.00000000E+00)+0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*b*d*(0.00000000E+00)*(0.00000000E+00)+0.5*b*d*(3.52152853E-03)*(0.00000000E+00)+0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.3333333333333333*b*d*(3.62100856E-01)**2+0.5*b*d*(0.00000000E+00)**2+0.5*b*d*(0.00000000E+00)**2+0.5*b*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*d*(6.93214053E-06)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(3.52152853E-03)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.08333333333333333*a*d*(3.62100856E-01)**2-0.25*a*d*(6.38811127E-01)**2+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d*(6.38811127E-01)*(1.00000000E+03)+0.5*c*(6.38811127E-01)*(1.00000000E+03)) ),  ( ((0.-0.5*(1.0j))*d*(6.38811127E-01)*(1.00000000E+03)-(0.+0.5*(1.0j))*c*(6.38811127E-01)*(1.00000000E+03)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(6.38811127E-01)**2+(1.00000000E+03)**2+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*a**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*c*a*(5.10999944E-04)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(9.70899485E-03)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*c*a*(6.38811127E-01)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(5.00087495E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c*(6.38811127E-01)*(1.00000000E+03)+0.5*d*(6.38811127E-01)*(1.00000000E+03)-0.35355339059327373*a*b*(6.38811127E-01)*(8.52161333E-01)) ),  ( ((0.+0.5*(1.0j))*c*(6.38811127E-01)*(1.00000000E+03)+(0.+0.5*(1.0j))*d*(6.38811127E-01)*(1.00000000E+03)-(0.+0.35355339059327373*(1.0j))*a*b*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.38811127E-01)**2+(1.00000000E+03)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(5.10999944E-04)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(9.70899485E-03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(5.00087495E-01)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(1.59497772E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(3.29791942E-02)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.55101987E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(1.59497772E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(3.29791942E-02)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(3.29791942E-02)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(1.59497772E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(3.29791942E-02)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.55101987E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.55101987E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2+(1.00000000E+03)**2) ),  ( ((0.+0.25*(1.0j))*a**2*(1.06083369E+00)**2-(0.+0.25*(1.0j))*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.5*b*(1.06083369E+00)*(1.00000000E+03)+0.35355339059327373*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.5*a*(1.06083369E+00)*(1.00000000E+03)-0.35355339059327373*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.25*(1.0j))*a**2*(1.06083369E+00)**2+(0.+0.25*(1.0j))*b**2*(1.06083369E+00)**2) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2+(1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.-0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.5*(1.0j))*b*(1.06083369E+00)*(1.00000000E+03)-(0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.-0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.5*(1.0j))*a*(1.06083369E+00)*(1.00000000E+03)-(0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.08333333333333333*a**2*(3.62100856E-01)*(1.06083369E+00)+0.3333333333333333*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2+(1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(1.06083369E+00)**2+0.14433756729740646*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.5*b*(1.06083369E+00)*(1.00000000E+03)+0.35355339059327373*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.5*a*(1.06083369E+00)*(1.00000000E+03)-0.35355339059327373*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2+(1.00000000E+03)**2) ),  ( ((0.+0.25*(1.0j))*a**2*(1.06083369E+00)**2-(0.+0.25*(1.0j))*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.5*b*(1.06083369E+00)*(1.00000000E+03)+0.35355339059327373*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.5*a*(1.06083369E+00)*(1.00000000E+03)-0.35355339059327373*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.25*(1.0j))*a**2*(1.06083369E+00)**2+(0.+0.25*(1.0j))*b**2*(1.06083369E+00)**2) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2+(1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.-0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.5*(1.0j))*b*(1.06083369E+00)*(1.00000000E+03)-(0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((0.-0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.-0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.5*(1.0j))*a*(1.06083369E+00)*(1.00000000E+03)-(0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( ((1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.048112522432468816*a**2*(3.62100856E-01)*(1.06083369E+00)+0.19245008972987526*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(1.06083369E+00)**2+0.14433756729740646*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2+(1.00000000E+03)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.20412414523193154*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.20412414523193154*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.2886751345948129*b*(1.06083369E+00)*(1.00000000E+03)+0.20412414523193154*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.20412414523193154*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (-0.20412414523193154*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.2886751345948129*a*(1.06083369E+00)*(1.00000000E+03)-0.20412414523193154*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(5.10999944E-04)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(9.70899485E-03)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(5.00087495E-01)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(0.00000000E+00)*(0.00000000E+00)-0.5*c*b*(5.00087495E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*a**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2+0.5*a**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*c*a*(5.10999944E-04)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*c*a*(0.00000000E+00)*(0.00000000E+00)-0.5*c*a*(9.70899485E-03)*(0.00000000E+00)-0.5*c*a*(0.00000000E+00)*(5.00087495E-01)-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*(6.38811127E-01)*(1.00000000E+03)-0.35355339059327373*b*d*(6.38811127E-01)*(8.52161333E-01)) ),  ( ((0.-0.5*(1.0j))*a*(6.38811127E-01)*(1.00000000E+03)+(0.+0.35355339059327373*(1.0j))*b*d*(6.38811127E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c*a*(6.38811127E-01)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(0.00000000E+00)**2-0.5*c*a*(5.00087495E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*a**2*(6.38811127E-01)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2+0.5*b**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(9.70899485E-03)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(9.70899485E-03)**2+0.5*c**2*(0.00000000E+00)**2) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*c**2*(5.10999944E-04)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)*(0.00000000E+00)+0.5*c**2*(9.70899485E-03)*(0.00000000E+00)+0.5*c**2*(0.00000000E+00)*(5.00087495E-01)) ),  ( (0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(0.00000000E+00)**2+0.5*c**2*(5.00087495E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.4714045207910317*a*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*b*d*(6.93214053E-06)*(0.00000000E+00)+0.5*b*d*(0.00000000E+00)*(0.00000000E+00)+0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.20412414523193154*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*a**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.4714045207910317*a*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.7071067811865475*a*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*b*d*(0.00000000E+00)*(0.00000000E+00)+0.5*b*d*(3.52152853E-03)*(0.00000000E+00)+0.5*b*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.20412414523193154*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*a**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*a**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.6666666666666666*b*(3.62100856E-01)*(1.00000000E+03)+0.4714045207910317*a*d*(3.62100856E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.3333333333333333*c*b*(3.62100856E-01)**2-0.7071067811865475*a*(1.00000000E+03)*(8.52161333E-01)) ),  ( (-0.3333333333333333*b*d*(3.62100856E-01)**2+0.5*b*d*(0.00000000E+00)**2+0.5*b*d*(0.00000000E+00)**2+0.5*b*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*b*(1.06083369E+00)*(1.00000000E+03)+0.35355339059327373*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.2886751345948129*b*(1.06083369E+00)*(1.00000000E+03)+0.20412414523193154*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*a**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.4444444444444444*b**2*(3.62100856E-01)**2+0.3333333333333333*b**2*(1.06083369E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*a**2*(8.52161333E-01)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.1111111111111111*a*b*(3.62100856E-01)**2-0.3333333333333333*a*b*(1.06083369E+00)**2+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*b*(1.06083369E+00)*(1.00000000E+03)+0.35355339059327373*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( ((0.-0.5*(1.0j))*b*(1.06083369E+00)*(1.00000000E+03)+(0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*b**2*(1.06083369E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.35355339059327373*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.5*b*(1.06083369E+00)*(1.00000000E+03)+0.35355339059327373*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( ((0.-0.5*(1.0j))*b*(1.06083369E+00)*(1.00000000E+03)+(0.+0.35355339059327373*(1.0j))*a*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*b**2*(1.06083369E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.1178511301977579*b*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*a*d*(6.93214053E-06)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.20412414523193154*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*b**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.1178511301977579*b*d*(3.62100856E-01)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(6.38811127E-01)*(0.00000000E+00)) ),  ( (-0.7071067811865475*b*(1.00000000E+03)*(0.00000000E+00)) ),  ( (0.5*a*d*(0.00000000E+00)*(0.00000000E+00)+0.5*a*d*(3.52152853E-03)*(0.00000000E+00)+0.5*a*d*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.20412414523193154*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*b**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*b**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.16666666666666666*a*(3.62100856E-01)*(1.00000000E+03)-0.1178511301977579*b*d*(3.62100856E-01)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*(6.38811127E-01)*(1.00000000E+03)-0.35355339059327373*b*d*(6.38811127E-01)*(8.52161333E-01)) ),  ( (-0.08333333333333333*c*a*(3.62100856E-01)**2+0.25*c*a*(6.38811127E-01)**2-0.7071067811865475*b*(1.00000000E+03)*(8.52161333E-01)) ),  ( (0.08333333333333333*a*d*(3.62100856E-01)**2-0.25*a*d*(6.38811127E-01)**2+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(0.00000000E+00)**2+0.5*a*d*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*(1.06083369E+00)*(1.00000000E+03)-0.35355339059327373*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.2886751345948129*a*(1.06083369E+00)*(1.00000000E+03)-0.20412414523193154*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*a*b*(0.00000000E+00)*(8.52161333E-01)) ),  ( (-0.1111111111111111*a*b*(3.62100856E-01)**2-0.3333333333333333*a*b*(1.06083369E+00)**2+0.5*a*b*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*b**2*(0.00000000E+00)*(8.52161333E-01)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.027777777777777776*a**2*(3.62100856E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.3333333333333333*a**2*(1.06083369E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*b**2*(8.52161333E-01)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*(1.06083369E+00)*(1.00000000E+03)-0.35355339059327373*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( ((0.-0.5*(1.0j))*a*(1.06083369E+00)*(1.00000000E+03)+(0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*a**2*(1.06083369E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.35355339059327373*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( ((0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(0.00000000E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(3.52152853E-03)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)) ),  ( (0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(3.52152853E-03)**2+0.5*d**2*(0.00000000E+00)**2) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*a*(1.06083369E+00)*(1.00000000E+03)-0.35355339059327373*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( ((0.-0.5*(1.0j))*a*(1.06083369E+00)*(1.00000000E+03)+(0.+0.35355339059327373*(1.0j))*b*d*(1.06083369E+00)*(8.52161333E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.5*d**2*(6.93214053E-06)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*d**2*(0.00000000E+00)*(0.00000000E+00)+0.5*d**2*(3.52152853E-03)*(0.00000000E+00)+0.5*d**2*(0.00000000E+00)*(8.52161333E-01)) ),  ( (0.5*a**2*(1.06083369E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(0.00000000E+00)**2+0.5*d**2*(8.52161333E-01)**2) ) ] )
    massSquaredMatrix = massSquaredElementArray.reshape( int(math.sqrt(
                                       massSquaredElementArray.size )), -1 )
    return numpy.linalg.eigvalsh( massSquaredMatrix )

# The masses-squared from this function are in GeV^2:
def MassesSquared4( a, b, c, d ):
    massSquaredElementArray = numpy.array( [  ( (0.25*c**2*(3.62100856E-01)**2+0.027777777777777776*a**2*(3.62100856E-01)**2+0.4444444444444444*b**2*(3.62100856E-01)**2+0.25*d**2*(3.62100856E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*c**2*(3.62100856E-01)*(6.38811127E-01)+0.08333333333333333*a**2*(3.62100856E-01)*(6.38811127E-01)-0.25*d**2*(3.62100856E-01)*(6.38811127E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.08333333333333333*a**2*(3.62100856E-01)*(1.06083369E+00)+0.3333333333333333*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.048112522432468816*a**2*(3.62100856E-01)*(1.06083369E+00)+0.19245008972987526*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.25*c**2*(6.38811127E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.25*d**2*(6.38811127E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*c**2*(6.38811127E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.25*d**2*(6.38811127E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (-0.25*c**2*(3.62100856E-01)*(6.38811127E-01)+0.08333333333333333*a**2*(3.62100856E-01)*(6.38811127E-01)-0.25*d**2*(3.62100856E-01)*(6.38811127E-01)) ),  ( (0.) ),  ( (0.) ),  ( (0.25*c**2*(6.38811127E-01)**2+0.25*a**2*(6.38811127E-01)**2+0.25*d**2*(6.38811127E-01)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.08333333333333333*a**2*(3.62100856E-01)*(1.06083369E+00)+0.3333333333333333*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(1.06083369E+00)**2+0.14433756729740646*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.25*a**2*(1.06083369E+00)**2+0.25*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.048112522432468816*a**2*(3.62100856E-01)*(1.06083369E+00)+0.19245008972987526*b**2*(3.62100856E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(6.38811127E-01)*(1.06083369E+00)) ),  ( (0.) ),  ( (0.) ),  ( (0.14433756729740646*a**2*(1.06083369E+00)**2+0.14433756729740646*b**2*(1.06083369E+00)**2) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.) ),  ( (0.08333333333333333*a**2*(1.06083369E+00)**2+0.08333333333333333*b**2*(1.06083369E+00)**2) ) ] )
    massSquaredMatrix = massSquaredElementArray.reshape( int(math.sqrt(
                                       massSquaredElementArray.size )), -1 )
    return numpy.linalg.eigvalsh( massSquaredMatrix )



MassesSquareds = [ [ MassesSquared1, 1, 1.5, "" ],
                   [ MassesSquared2, 1, 1.5, "" ],
                   [ MassesSquared3, -2, 1.5, "" ],
                   [ MassesSquared4, 3, 1.5, "vector" ] ]

def LoopCorrectedPotential( a, b, c, d, temperatureValue = 0.0 ):
    loopCorrections = 0.0
    for MassesSquared in MassesSquareds:
        loopCorrections += MassSquaredCorrections( MassesSquared[ 0 ]( a, b, c, d ),
                                                   MassesSquared[ 1 ],
                                                   MassesSquared[ 2 ] )
    return ( PolynomimalPartOfPotential( a, b, c, d )
             + ( loopFactor * loopCorrections ) )


def LoopAndThermalCorrectedPotential( a, b, c, d, temperatureValue ):
    loopCorrections = 0.0
    thermalCorrections = 0.0
    temperatureSquared = ( temperatureValue * temperatureValue )
    for MassesSquared in MassesSquareds:
        massesSquared = MassesSquared[ 0 ]( a, b, c, d )
        loopCorrections += MassSquaredCorrections( massesSquared,
                                                   MassesSquared[ 1 ],
                                                   MassesSquared[ 2 ] )
        if ( temperatureValue > 0.0 ):
            adjustedOverallFactor = MassesSquared[ 1 ]
            if ( MassesSquared[ 3 ] is "vector" ):
                adjustedOverallFactor = ( ( 2.0 * adjustedOverallFactor )
                                          / 3.0 )
            thermalCorrections += ThermalCorrections( massesSquared,
                                                     adjustedOverallFactor,
                                                      temperatureSquared )
    return ( PolynomimalPartOfPotential( a, b, c, d )
             + ( loopFactor * loopCorrections )
             + ( thermalFactor * temperatureSquared * temperatureSquared
                 * thermalCorrections ) )


def AbsLoopAndThermalCorrectedPotential( a, b, c, d, temperatureValue ):
    loopCorrections = 0.0
    thermalCorrections = 0.0
    temperatureSquared = ( temperatureValue * temperatureValue )
    for MassesSquared in MassesSquareds:
        massesSquared = MassesSquared[ 0 ]( a, b, c, d )
        loopCorrections += MassSquaredCorrections( massesSquared,
                                                   MassesSquared[ 1 ],
                                                   MassesSquared[ 2 ] )
        if ( temperatureValue > 0.0 ):
            adjustedOverallFactor = MassesSquared[ 1 ]
            if ( MassesSquared[ 3 ] is "vector" ):
                adjustedOverallFactor = ( ( 2.0 * adjustedOverallFactor )
                                          / 3.0 )
            thermalCorrections += AbsThermalCorrections( massesSquared,
                                                     adjustedOverallFactor,
                                                       temperatureSquared )
    return ( PolynomimalPartOfPotential( a, b, c, d )
             + ( loopFactor * loopCorrections )
             + ( thermalFactor * temperatureSquared * temperatureSquared
                 * thermalCorrections ) )


def FloorLoopAndThermalCorrectedPotential( a, b, c, d, temperatureValue ):
    loopCorrections = 0.0
    thermalCorrections = 0.0
    temperatureSquared = ( temperatureValue * temperatureValue )
    for MassesSquared in MassesSquareds:
        massesSquared = MassesSquared[ 0 ]( a, b, c, d )
        loopCorrections += MassSquaredCorrections( massesSquared,
                                                   MassesSquared[ 1 ],
                                                   MassesSquared[ 2 ] )
        if ( temperatureValue > 0.0 ):
            adjustedOverallFactor = MassesSquared[ 1 ]
            if ( MassesSquared[ 3 ] is "vector" ):
                adjustedOverallFactor = ( ( 2.0 * adjustedOverallFactor )
                                          / 3.0 )
            thermalCorrections += FloorThermalCorrections( massesSquared,
                                                     adjustedOverallFactor,
                                                       temperatureSquared )
    return ( PolynomimalPartOfPotential( a, b, c, d )
             + ( loopFactor * loopCorrections )
             + ( thermalFactor * temperatureSquared * temperatureSquared
                 * thermalCorrections ) )


# PotentialScaler class:

class PotentialScaler:
    """
    This class exists solely to provide a function that is a scaled version
    of the function given to the constructor for MINUIT, and a set of
    functions using arrays that the CosmoTransitions objects want to use.
    Well, it also changes the function beyond a hypersurface of radiuszn    fieldLimit: within the hypersurface, the function is just scaled, but
    outside, the function is taken to be the value it had on the surface at
    the same angular co-ordinates, plus the square of the difference of the
    square of the Euclidean length of the field configuration from the
    square of fieldLimit. I.e., if the field configuration vector is longer
    than fieldLimit, it is scaled to be of length fieldLimit, and then the
    difference is its original length squared minus fieldLimit squared, and
    this difference is itself squared and added to the value of the
    potential evaluated at the scaled field configuration vector.
    """

    def __init__( self,
                  FunctionToScale,
                  fieldLimit,
                  temperatureValue = 0.0 ):
        self.FunctionToScale = FunctionToScale
        self.functionAtOrigin = FunctionToScale( 0.0, 0.0, 0.0, 0.0, 0.0 )
        self.fieldLimitSquared = ( inverseScale * fieldLimit )**2
        self.temperatureValue = temperatureValue


    def SetMaximumConfigurationLength( self, fieldLimit ):
        self.fieldLimitSquared = ( inverseScale * fieldLimit )**2


    def ScaledFunctionFromScaledArguments( self,
                                      a, b, c, d ):
        configurationLengthSquared = ( ( c )**2 + ( a )**2 + ( b )**2 + ( d )**2 )
        lengthSquaredBeyondCap = 0.0
        if ( configurationLengthSquared > self.fieldLimitSquared ):
            lengthSquaredBeyondCap = ( configurationLengthSquared
                                       - self.fieldLimitSquared )
            scalingRatio = math.sqrt( self.fieldLimitSquared
                                      / configurationLengthSquared )
            c = ( scalingRatio * c )
            a = ( scalingRatio * a )
            b = ( scalingRatio * b )
            d = ( scalingRatio * d )
        functionValue = ( self.FunctionToScale( c = ( c * energyScale ),
                                                a = ( a * energyScale ),
                                                b = ( b * energyScale ),
                                                d = ( d * energyScale ),
                                                temperatureValue = self.temperatureValue )
                          - self.functionAtOrigin
                          + lengthSquaredBeyondCap**2 )
        return ( inverseScaleFourthed
                 * functionValue.real )

    def PotentialFromArray( self, pointAsArray ):
        return FunctionFromArray( self.FunctionToScale,
                                  pointAsArray,
                                  self.temperatureValue )

    def PotentialFromMatrix( self, arrayOfArrays ):
        if ( ( numberOfFields, ) == arrayOfArrays.shape ):
            return self.PotentialFromArray( arrayOfArrays )
        elif ( ( len( arrayOfArrays ), numberOfFields )
               == arrayOfArrays.shape ):
            returnArray = numpy.zeros( len( arrayOfArrays ) )
            for whichIndex in range( len( arrayOfArrays ) ):
                returnArray[ whichIndex ] = self.PotentialFromArray(
                                              arrayOfArrays[ whichIndex ] )
            return returnArray
        else:
            return None

    def GradientFromArray( self, pointAsArray ):
        potentialAtPoint = self.PotentialFromArray( pointAsArray )
        gradientArray = numpy.zeros( len( pointAsArray ) )
        for whichField in range( len( pointAsArray ) ):
            displacedPoint = pointAsArray.copy()
            displacedPoint[ whichField ] += numericalStepSize
            gradientArray[ whichField ] = ( ( self.PotentialFromArray(
                                                           displacedPoint )
                                              - potentialAtPoint )
                                            / numericalStepSize )
        return gradientArray

    def GradientFromMatrix( self, arrayOfArrays ):
        if ( ( numberOfFields, ) == arrayOfArrays.shape ):
            return self.GradientFromArray( arrayOfArrays )
        elif ( ( len( arrayOfArrays ), numberOfFields )
               == arrayOfArrays.shape ):
            returnMatrix = arrayOfArrays.copy()
            for whichIndex in range( len( arrayOfArrays ) ):
                returnMatrix[ whichIndex ] = self.GradientFromArray(
                                              arrayOfArrays[ whichIndex ] )
            return returnMatrix
        else:
            return None

# End of PotentialScaler class


# Vevacious class:

class Vevacious:
    """
    This class holds all the parameter-dependent stuff such as various
    refinements of the potential energy as a function of field
    configurations, as well as ancillary functions.
    """

    def __init__( self,
                  EffectivePotential,
                  ageOfKnownUniverseInSeconds = 4.3E+17,
                  fourthRootOfSolitonicFactorA = energyScale,
                  tunnelPathResolutionInGev = 50.0,
                  currentTemperature = 0.0 ):
        self.vevaciousVersion = "1.2.03"
        self.outputFile = "./VevaciousResult.vout"
        self.warningMessages = []

        self.EffectivePotential = EffectivePotential
        self.FieldValueLimit = ( 10.0 * energyScale )
        self.potentialScaler = PotentialScaler( self.EffectivePotential,
                                                self.FieldValueLimit,
                                    temperatureValue = currentTemperature )
        self.rollingToleranceSquared = ( 0.1 )**2
        self.foundMinima = []
        self.saddleSplitNudges = [ ( 1 ), ( 5 ), ( 20 ) ]
        self.fieldScaling = 2.0
        self.dsbVacuumIsMetastable = False
        self.originAsExtremum = self.FieldDictionaryToExtremum(
                                                              fieldOrigin )
        self.dsbVacuum = self.TryToMinimize( dsbInput )
        self.dsbArray = FieldDictionaryToArray( self.dsbVacuum[
                                                        "FieldValues" ] )
        self.minimumSeparationSquared = ( self.rollingToleranceSquared
                                        * numpy.sum( (self.dsbArray)**2 ) )
        self.panicVacuum = self.dsbVacuum
        self.panicArray = self.dsbArray
        self.globalMinimum = self.dsbVacuum
        self.globalArray = self.dsbArray

        self.ageOfKnownUniverseInSeconds = ageOfKnownUniverseInSeconds
        self.ageOfKnownUniverseInInverseGev = ( ageOfKnownUniverseInSeconds
                                                / 6.58211928E-25 )
        self.fourthRootOfSolitonicFactorA = fourthRootOfSolitonicFactorA
        self.tunnelPathResolutionInGev = tunnelPathResolutionInGev
        self.currentQuantumAction = None
        self.previousQuantumAction = None
        self.currentThermalAction = None
        self.previousThermalAction = None
        self.tunnelingTimeBound = 0.217
        self.quantumActionThreshold = -1.0
        if ( 0.0 < self.tunnelingTimeBound ):
            self.quantumActionThreshold = ( 4.0
                                        * math.log( self.tunnelingTimeBound
                                      * self.ageOfKnownUniverseInInverseGev
                                         * fourthRootOfSolitonicFactorA ) )
        self.thermalProbabilityThreshold = 0.1
# Based on correspondence with Alexander Kusenko and discussion with Bjoern
# Garbrecht:
# Taking [decay width per horizon]
# = [horizon volume] * [solitonic coefficient] * exp(-[thermal action]/T)
# at temperature T, where [horizon volume] = ( M_Plank / T^2 )^3, and
# taking [solitonic coefficient] to be T^4,
# the survival probability per horizon =
# exp( -integral of [time at T] with respect to [decay time] )
# = exp( -integral of [decay width per horizon] dT * [factor] ) )
# which exponents for N horizons to
# exp( -N * integral * [factor] ) )
# and [decay width per horizon] = M_Plank^3 T^(-2) exp(-S_3(T)/T)
# where [thermal action at temperature T] = S_3(T)
# exp( -N * integral * [factor] ) ) can be written, from entropy
# conservation and so on, as
# exp( -N * integral of C T^(-2) exp(-S_3(T)/T) dT ) )
# where C = [reduced Planck mass] * [solitonic coefficient/T^4]
# * sqrt[45/(4 pi^3 g_star(T))] * [g_star^now/g_star(T)] * (T_now/H_now)^3
# and we take g_star(T) to be 105.75 (what it is for the SM above
# temperatures of m_top) and conservatively take it as constant from T = 0
# to T_opt. Hence we have
# exp( -1.581E+106 GeV * integral of T^(-2) exp(-S_3(T)/T) dT ) )
# integrated from T = 0 to T_opt (as the contribution from higher
# temperatures drops off very quickly).
# 1.581E+106 is exp( 244.53 = lnOfThermalIntegrationFactor ) which is
# in agreement with the value of 240 quoted in the CosmoTransitions manual
# for an estimate of the threshold S_3(T)/T for T= 100 GeV.
# Kusenko (and others in the literature, including Wainwright implicitly in
# the CosmoTransitions manual as just mentioned) took the integral of
# exp(-S_3(T)/T) T^(-2) to be exp( S_3(T_opt)/T_opt) T_opt^(-1) where T_opt
# is the optimal tunneling temperature which dominates the integral.
# This might be a bit aggressive, and taking S_3(T) to be approximated by
# S_3(0) + T S' leads to the integral being 
# exp( -S_3(T_opt)/T_opt ) / S_3(0)
# Assuming that S_3(0) < S_3(T_opt) (which should hold for all cases of
# interest), the full integral should be between
# exp( -S_3(T_opt)/T_opt ) / S_3(T_opt)
# and exp( -S_3(T_opt)/T_opt ) / T_opt
# For a threshold survival probability P,
# 1.581E+106 GeV * integral of T^(-2) exp(-S_3(T)/T) dT )
# should be larger than ln(1/P). Hence we compare
# (S_3(T_opt)/T_opt) + ln( x / GeV ) to
# lnOfThermalIntegrationFactor - ln( ln(1/P) ) where x is either
# S_3(T_opt) or T_opt.
        self.thermalActionOverTemperatureComparison = (
                                               lnOfThermalIntegrationFactor
                                                                - math.log(
                                                              math.log( 1.0
                                   / self.thermalProbabilityThreshold ) ) )
        self.startingTime = time.clock()
        self.allowedRunningTime = 100.0
        self.ShouldTunnel = True
        self.ShouldTunnelThermally = False
        self.tunnelToGlobal = False
        self.ShouldDeformTunnelPaths = True
        if ( self.minimumSeparationSquared < 1.0 ):
            self.minimumSeparationSquared = 1.0


    def SetMinuitLimits( self, fieldLimit ):
        self.potentialScaler.SetMaximumConfigurationLength( fieldLimit )


    def MinuitValuesFromDictionary( self, fieldValueDictionary ):
        scaledFields = fieldValueDictionary.copy()
        for fieldKey in scaledFields.keys():
            scaledFields[ fieldKey ] *= inverseScale
        return scaledFields


    def FieldValuesFromMinuit( self, fieldValueDictionary ):
        scaledFields = fieldValueDictionary.copy()
        for fieldKey in scaledFields.keys():
            scaledFields[ fieldKey ] *= energyScale
        return scaledFields


    def PotentialValueFromMinuit( self, potentialDepth ):
        return ( potentialDepth * energyScaleFourth )


    def FieldDictionaryToExtremum( self, fieldValueDictionary ):
        return { "FieldValues": fieldValueDictionary.copy(),
                 "PotentialValue": ( FunctionFromDictionary(
                                                  self.EffectivePotential,
                                                    fieldValueDictionary )
                                - self.potentialScaler.functionAtOrigin ),
                 "MinuitError": None }


    def ExtremumAsMathematica( self, givenExtremum ):
        return ( "{ "
             + UserFieldsAsMathematica( givenExtremum[ "FieldValues" ]  )
                 + ", TreeLevelPotentialValue -> "
                 + str( FunctionFromDictionary( TreeLevelPotential,
                                       givenExtremum[ "FieldValues" ] ) )
                 + ", EffectivePotentialValue -> "
                 + str( givenExtremum[ "PotentialValue" ] )
                 + " }" )


    def TryToMinimize( self, fieldValueDictionary ):
        foundExtremum = self.FieldDictionaryToExtremum(
                                                     fieldValueDictionary )
        print( "trying to minimize "
               + self.ExtremumAsMathematica( foundExtremum )
               + " (T = " + str( self.potentialScaler.temperatureValue )
               + ")" )
        try:
            minuitArguments = dict()
            for fieldShortName in fieldValueDictionary.keys():
                minuitArguments[ fieldShortName ] = ( inverseScale
                                 * fieldValueDictionary[ fieldShortName ] )
                minuitArguments[ "error_" + fieldShortName ] = 0.1
            minuitObject = minuit.Minuit(
                   self.potentialScaler.ScaledFunctionFromScaledArguments,
                                          print_level = 0,
                                          errordef = 0.01,
                                          **minuitArguments )
            minuitObject.migrad()
            foundExtremum = { "FieldValues": self.FieldValuesFromMinuit(
                                                     minuitObject.values ),
                         "PotentialValue": self.PotentialValueFromMinuit(
                                                       minuitObject.fval ),
                            "MinuitError": self.PotentialValueFromMinuit(
                                                       minuitObject.edm ) }
            print( "rolled to "
                   + self.ExtremumAsMathematica( foundExtremum )
                   + "\n\n" )
        except Exception as unexpectedException:
            self.LogWarning( "The MINUIT wrapper threw an exception:\n"
                        + str( unexpectedException )
                        + "\nwhile trying to minimize the potential"
                        + " starting at "
                        + UserFieldsAsMathematica( fieldValueDictionary )
                        + ". MINUIT stopped at "
                        + UserFieldsAsMathematica(
                       self.FieldValuesFromMinuit( minuitObject.values ) )
                        + ".  MINUIT's estimate of how much deeper it"
                        + " should go is "
                + str( self.PotentialValueFromMinuit( minuitObject.edm ) )
                        + " GeV^4.\nTaking the starting point as a"
                        + " vacuum candidate." )
        return foundExtremum


    def LogWarning( self, warningMessage ):
        self.warningMessages.append( warningMessage )
        print( warningMessage )


    def WriteExtrema( self, fieldValueDictionaries, fileToWrite ):
        outputFile = open( fileToWrite, "w" )
        outputFile.write( "{\n" )
        for fieldValueDictionary in fieldValueDictionaries:
            currentExtremum = self.FieldDictionaryToExtremum(
                                                     fieldValueDictionary )
            outputFile.write( self.ExtremumAsMathematica( currentExtremum )
                              + "\n" )
        outputFile.write( "}" )
        outputFile.close()


    def CloseEnoughToDsbOrSignFlip( self, fieldValueDictionary ):
        fieldArray = FieldDictionaryToArray( fieldValueDictionary )
        longerLengthSquared = numpy.sum( fieldArray**2 )
        otherLengthSquared = numpy.sum( (self.dsbArray)**2 )
        if( otherLengthSquared > longerLengthSquared ):
            longerLengthSquared = otherLengthSquared
        thresholdLengthSquared = ( longerLengthSquared
                                   * self.rollingToleranceSquared )
        return ( numpy.sum( ( abs( fieldArray )
                              - abs( self.dsbArray ) )**2 )
                 < thresholdLengthSquared )


    def TryToMinimizeIncludingRescaling( self, fieldValueDictionary ):
        foundExtremum = self.TryToMinimize( fieldValueDictionary )
        if ( self.CloseEnoughToDsbOrSignFlip( foundExtremum[
                                                        "FieldValues" ] )
             and
             not self.CloseEnoughToDsbOrSignFlip( fieldValueDictionary ) ):
            scaledValues = fieldValueDictionary.copy()
            for fieldKey in fieldValueDictionary.keys():
                scaledValues[ fieldKey ] *= self.fieldScaling
            scaledPoint = self.FieldDictionaryToExtremum( scaledValues )
            self.LogWarning( "Starting point differed from DSB vacuum"
                             + " but rolled there. Trying again with"
                             + " scaled field configuration ("
                             + self.ExtremumAsMathematica(
                                            self.FieldDictionaryToExtremum(
                                         scaledPoint[ "FieldValues" ] ) )
                             + ")." )
            foundExtremum = self.TryToMinimize( scaledValues )
        return foundExtremum


    def NudgeOff( self, foundSaddlePoint, saddleSplitNudge ):
        saddleFieldValues = foundSaddlePoint[ 0 ][ "FieldValues" ]
        positivelyNudged = saddleFieldValues.copy()
        negativelyNudged = saddleFieldValues.copy()
        nudgeVector = foundSaddlePoint[ 1 ]
        for fieldIndex in range( len( namesOfFields ) ):
            whichField = namesOfFields[ fieldIndex ]
            positivelyNudged[ whichField ] += nudgeVector[ fieldIndex ]
            negativelyNudged[ whichField ] -= nudgeVector[ fieldIndex ]
        return [ positivelyNudged, negativelyNudged ]


    def RollExtrema( self, startingFieldConfigurations ):
        foundExtrema = []
        foundSaddlePoints = []
        for startingFieldConfiguration in startingFieldConfigurations:
            foundExtrema.append( self.TryToMinimizeIncludingRescaling(
                                             startingFieldConfiguration ) )
        if ( len( self.saddleSplitNudges ) > 0 ):
            for foundExtremum in foundExtrema:
                isMinimum, nudgeVector = self.CheckHessian( foundExtremum )
                if ( isMinimum ):
                    self.foundMinima.append( foundExtremum )
                else:
                    foundSaddlePoints.append( [ foundExtremum,
                                                nudgeVector ] )
        else:
            self.foundMinima = foundExtrema
# At this point, the field configurations from startingFieldConfigurations
# have been divided into minima in self.foundMinima and saddle points (&
# possibly maxima) in foundSaddlePoints, if self.saddleSplitNudges is not
# an empty list. (If self.saddleSplitNudges is an empty list, at this point
# self.foundMinima contains all the extrema from the 1st pass, & this
# function won't do anything else.)
        for saddleSplitNudge in self.saddleSplitNudges:
# For each requested nudging, nudgedFieldConfigurations is made from all
# the pairs of nearby configurations to each in foundSaddlePoints,
# foundSaddlePoints is then emptied, & each configuration is rolled & the
# rolled configuration is put into either self.foundMinima if a minimum or
# foundSaddlePoints again if not, & then the loop iterates.
            nudgedFieldConfigurations = []
            for foundSaddlePoint in foundSaddlePoints:
                nudgedFieldConfigurations.extend( self.NudgeOff(
                                                          foundSaddlePoint,
                                                       saddleSplitNudge ) )
            foundSaddlePoints = []
            for nudgedFieldConfiguration in nudgedFieldConfigurations:
                foundExtremum = self.TryToMinimizeIncludingRescaling(
                                                 nudgedFieldConfiguration )
                isMinimum, nudgeVector = self.CheckHessian( foundExtremum )
                if ( isMinimum ):
                    self.foundMinima.append( foundExtremum )
                else:
                    foundSaddlePoints.append( [ foundExtremum,
                                                nudgeVector ] )
# At this point, any remaining saddle points / maxima are just appended to
# self.foundMinima so that they can still be tunneled to, regardless of the
# fact that the Universe would still evolve away from such configurations.
        for foundSaddlePoint in foundSaddlePoints:
            self.foundMinima.append( foundSaddlePoint[ 0 ] )
# Now the minima are sorted by depth:
        tunnelDistance = -1.0
        for foundMinimum in self.foundMinima:
            if ( ( foundMinimum[ "PotentialValue" ] < self.dsbVacuum[
                                                    "PotentialValue" ]  )
                 and
                 ( not self.CloseEnoughToDsbOrSignFlip( foundMinimum[
                                                   "FieldValues" ] ) ) ):
                self.dsbVacuumIsMetastable = True
                fieldArray = FieldDictionaryToArray( foundMinimum[
                                                        "FieldValues" ] )
                currentDistanceToDsb = numpy.sum( ( fieldArray
                                                    - self.dsbArray )**2 )
                if ( ( tunnelDistance < 0.0 )
                     or
                     ( currentDistanceToDsb < tunnelDistance ) ):
                    tunnelDistance = currentDistanceToDsb
                    self.panicVacuum = foundMinimum
                    self.panicArray = fieldArray
                if ( foundMinimum[ "PotentialValue"
                            ] < self.globalMinimum[ "PotentialValue" ] ):
                    self.globalMinimum = foundMinimum
                    self.globalArray = fieldArray
                if ( self.tunnelToGlobal ):
                    self.panicVacuum = self.globalMinimum


    def CheckHessian( self, foundExtremum ):
        isMinimum = True
        nudgeVector = list( originArray )
        eigensystemOfHessian = numpy.linalg.eigh( NumericalHessian(
                                                   self.EffectivePotential,
                                       foundExtremum[ "FieldValues" ] ) )
# It doesn't matter what value mostNegativeEigenvalueValue has if it's
# positive because it is only there to record the lowest eigenvalue if it
# is less than or equal to zero.
        mostNegativeEigenvalueValue = 1.0
        mostNegativeEigenvalueIndex = 0
        for eigenvalueIndex in range( len( eigensystemOfHessian[ 0 ] ) ):
            if ( mostNegativeEigenvalueValue > eigensystemOfHessian[ 0 ][
                                                       eigenvalueIndex ] ):
                mostNegativeEigenvalueValue = eigensystemOfHessian[ 0 ][
                                                          eigenvalueIndex ]
                mostNegativeEigenvalueIndex = eigenvalueIndex
        isMinimum = ( mostNegativeEigenvalueValue > 0.0 )
        if not isMinimum:
            nudgeVector = eigensystemOfHessian[ 1 ][ :,
                                              mostNegativeEigenvalueIndex ]
        return [ isMinimum, nudgeVector ]


    def WriteMinima( self, fileToWrite ):
        outputFile = open( fileToWrite, "w" )
        outputFile.write( "{\n" )
        for foundMinimum in self.foundMinima:
            outputFile.write( self.ExtremumAsMathematica( foundMinimum )
                              + "\n" )
        outputFile.write( "}" )
        outputFile.close()


    def CalculateAction( self,
                         falseVacuum = None,
                         trueVacuum = None,
                         deformPath = True,
                         thermalNotQuantum = None,
                         innerLoopMaxDeformations = 10,
                         outerLoopMaxDeformations = 10 ):
        if ( falseVacuum is None ):
            falseVacuum = self.dsbVacuum
        if ( trueVacuum is None ):
            trueVacuum = self.panicVacuum
        if thermalNotQuantum is None:
            thermalNotQuantum = (
                            self.potentialScaler.currentTemperature > 0.0 )
        falseVacuumArray = FieldDictionaryToArray( falseVacuum[
                                                        "FieldValues" ] )
        trueVacuumArray = FieldDictionaryToArray( trueVacuum[
                                                        "FieldValues" ] )
        arrayOfArrays = numpy.array( [ trueVacuumArray,
                                                       falseVacuumArray ] )
        configurationDifferenceLength = math.sqrt( numpy.sum( (
                                                            trueVacuumArray
                                                - falseVacuumArray )**2 ) )
        tunnelPathPoints = int( configurationDifferenceLength
                                / self.tunnelPathResolutionInGev )
        print( "tunnelingCalculator.npoints being given "
               + str( tunnelPathPoints ) )
        print( "falseVacuumArray = " + str( falseVacuumArray ) )
        print( "trueVacuumArray = " + str( trueVacuumArray ) )

        numberOfSpaceTimeDimensionsForTunneling = 3

        if thermalNotQuantum:
            self.previousThermalAction = self.currentThermalAction
            numberOfSpaceTimeDimensionsForTunneling = 2
        else:
            self.previousQuantumAction = self.currentQuantumAction
        calculatedAction = exponentCutOff

        if ( ctMajorVersion is 2 ):
            if not deformPath:
                innerLoopMaxDeformations = 0
                outerLoopMaxDeformations = 1
            tunnelingResult = CTPD.fullTunneling( path_pts = arrayOfArrays,
                              V = self.potentialScaler.PotentialFromMatrix,
                              dV = self.potentialScaler.GradientFromMatrix,
                                              tunneling_init_params = dict(
                         alpha = numberOfSpaceTimeDimensionsForTunneling ),
                                       tunneling_findProfile_params = dict(
                                              npoints = tunnelPathPoints ),
                                          deformation_deform_params = dict(
                                      maxiter = innerLoopMaxDeformations ),
                                       maxiter = outerLoopMaxDeformations )
            calculatedAction = tunnelingResult.action
        elif ( ctMajorVersion is 1 ):
            tunnelingCalculator = CTPD.fullTunneling( phi = arrayOfArrays,
                              V = self.potentialScaler.PotentialFromMatrix,
                              dV = self.potentialScaler.GradientFromMatrix,
                           alpha = numberOfSpaceTimeDimensionsForTunneling,
                                                npoints = tunnelPathPoints,
                                                   quickTunneling = False )
            if deformPath:
                tunnelingCalculator.run(
                                        maxiter = innerLoopMaxDeformations,
                                      maxiter2 = outerLoopMaxDeformations )
            else:
                tunnelingCalculator.tunnel1D()
            calculatedAction = tunnelingCalculator.findAction()

        if thermalNotQuantum:
            self.currentThermalAction = calculatedAction
        else:
            self.currentQuantumAction = calculatedAction

        return calculatedAction


    def AllowedRunningTimeExceeded( self ):
        returnValue = ( time.clock() > ( self.startingTime
                                         + self.allowedRunningTime ) )
        print( "AllowedRunningTimeExceeded about to return "
               + str( returnValue )
               + "." )
        return returnValue


    def QuantumTunnelingTimeInInverseGev( self, currentAction ):
        if ( currentAction < 0.0 ):
            print( "Warning! Quantum tunneling time for a negative"
                   + " action ("
                   + str( currentAction )
                   + ") asked for, which may indicate a problem (or may"
                   + " not, but it would be a very thin potential"
                   + " barrier). Returning a tunneling time for an"
                   + " action of 0." )
            currentAction = 0.0
        elif ( currentAction > exponentCutOff ):
            print( "Warning! Quantum tunneling time for a very large"
                   + " action ("
                   + str( currentAction )
                   + ") asked for, which would probably cause an"
                   + " overflow in the evaluation of the exponent."
                   + " Returning a tunneling time for an action of "
                   + str( exponentCutOff )
                   + "." )
            currentAction = exponentCutOff
        return ( math.exp( 0.25 * currentAction )
                 / self.fourthRootOfSolitonicFactorA )


    def SetTemperature( self, currentTemperature ):
        self.potentialScaler.temperatureValue = currentTemperature


    def RollVacuaAtTemperature( self,
                                temperatureGuess,
                                dsbEvaporationTemperature ):
        print( "Trying " + str( temperatureGuess ) + " GeV.\n" )
        self.SetTemperature( temperatureGuess )
        thermalDsbVacuum = self.originAsExtremum
        if ( temperatureGuess > dsbEvaporationTemperature ):
            print( "DSB vacuum evaporated!" )
        else:
            print( "DSB vacuum:" )
            thermalDsbVacuum = self.TryToMinimize( self.dsbVacuum[
                                                        "FieldValues" ] )
        print( "Panic vacuum:" )
        thermalPanicVacuum = self.TryToMinimize( self.panicVacuum[
                                                        "FieldValues" ] )
        return [ thermalDsbVacuum, thermalPanicVacuum ]


    def TunnelingPossible( self, falseVacuum, trueVacuum ):
        if ( falseVacuum[ "PotentialValue" ]
             > trueVacuum[ "PotentialValue" ] ):
            trueArray = FieldDictionaryToArray( trueVacuum[
                                                        "FieldValues" ] )
            if ( numpy.sum( trueArray**2 )
                 > self.minimumSeparationSquared ):
                falseArray = FieldDictionaryToArray( falseVacuum[
                                                        "FieldValues" ] )
                return ( numpy.sum( ( trueArray - falseArray )**2 )
                         > self.minimumSeparationSquared )
        return False


# This estimates at what temperature tunneling from the field origin to the
# given vacuum becomes impossible. It returns a temperature just below,
# a temperature just above. A pair of zeroes are returned if the given
# minimum is not deeper than the field origin at zero temperature. It is
# not technically the evaporation temperature necessarily, as the minimum
# may still exist at this temperature, though it is not deeper than the
# purely symmetric phase vacuum, so it is unreasonable to think that the
# Universe would cool into the false vacuum at that temperature rather
# than into the symmetric minimum.
    def FindEvaporationTemperature( self,
                                    minimumAtZeroTemperature,
                                    logTwoAccuracy = 7,
                   criticalComparedToOriginRatherThanEvaporation = False ):
# As a 1st guess, we take the temperature such that the SM thermal
# corrections at zero VEVs would equal the difference (remembering that the
# value of the potential at the origin has already been subtracted from
# minimumAtZeroTemperature[ "PotentialValue" ]):
        zeroTemperatureDepth = minimumAtZeroTemperature[
                                                       "PotentialValue" ]
        if ( zeroTemperatureDepth >= 0.0 ):
            return [ 0.0, 0.0 ]
# The corrections are ( T^4 / ( 2 pi^2 ) ) * sum of J functions, and the
# values of the J functions are about 2 for massless bosonic & fermionic
# degrees of freedom, & there are ~100 degrees of freedom in the SM. Hence
# we take the coefficient of T^4 to be 100 / ( 2 pi^2 ) ~= 5
        evaporationTemperatureGuess = math.pow( ( -zeroTemperatureDepth
                                                  / 5.0 ),
                                                 0.25 )
# We aim to have a pair of temperatures, one above the critical
# temperature, the other below. If the initial guess was below the critical
# temperature, we start doubling the temperature, recording the previous
# temperature each time. If it was above, we start halving the temperature,
# recording the previous temperature each time.
        originDepth = ( FunctionFromDictionary( self.EffectivePotential,
                                                fieldOrigin,
                                              evaporationTemperatureGuess )
                        - self.potentialScaler.functionAtOrigin )
        print( "Searching for evaporation temperature.\n\n" )
        print( "Trying "
               + str( evaporationTemperatureGuess )
               + " GeV.\n" )
        while ( originDepth > zeroTemperatureDepth ):
            evaporationTemperatureGuess = ( 2.0
                                            * evaporationTemperatureGuess )
            print( "Trying "
                   + str( evaporationTemperatureGuess )
                   + " GeV.\n" )
            originDepth = ( FunctionFromDictionary(
                                                   self.EffectivePotential,
                                                    fieldOrigin,
                                              evaporationTemperatureGuess )
                            - self.potentialScaler.functionAtOrigin )
# At this point, criticalTemperatureGuess is definitely above the critical
# temperature. Now we look for the critical temperature from above:
        while ( originDepth < zeroTemperatureDepth ):
            evaporationTemperatureGuess = ( 0.5
                                            * evaporationTemperatureGuess )
            print( "Trying "
                   + str( evaporationTemperatureGuess )
                   + " GeV.\n" )
            originDepth = ( FunctionFromDictionary(
                                                   self.EffectivePotential,
                                                    fieldOrigin,
                                              evaporationTemperatureGuess )
                            - self.potentialScaler.functionAtOrigin )
# At this point, evaporationTemperatureGuess should be between 1.0 and 2.0
# times the temperature at which the field origin is lower than that of the
# minimum at zero temperature.
        print( "The temperature at which the field origin becomes deeper than the minimum at"
               + " T = 0 is between "
               + str( evaporationTemperatureGuess )
               + " GeV and "
               + str( 2.0 * evaporationTemperatureGuess )
               + " GeV.\n" )
        self.SetTemperature( evaporationTemperatureGuess )
        thermalMinimum = self.TryToMinimize( minimumAtZeroTemperature[
                                                        "FieldValues" ] )
        keepLooping = True
        while keepLooping:
            evaporationTemperatureGuess = ( 2.0
                                            * evaporationTemperatureGuess )
            print( "Trying "
                   + str( evaporationTemperatureGuess )
                   + " GeV.\n" )
            self.SetTemperature( evaporationTemperatureGuess )
            thermalMinimum = self.TryToMinimize( minimumAtZeroTemperature[
                                                        "FieldValues" ] )
            if criticalComparedToOriginRatherThanEvaporation:
                keepLooping = ( thermalMinimum[ "PotentialValue" ]
                                < ( FunctionFromDictionary(
                                                   self.EffectivePotential,
                                                            fieldOrigin,
                                              evaporationTemperatureGuess )
                                - self.potentialScaler.functionAtOrigin ) )
            else:
                thermalArray = FieldDictionaryToArray( thermalMinimum[
                                                        "FieldValues" ] )
                keepLooping = ( numpy.sum( thermalArray**2 )
                                > self.minimumSeparationSquared )
# This relies on the field origin being a local minimum at the evaporation
# temperature - it should never be that MINUIT rolls the minimum to near
# the origin without the exact origin still being deeper.
        justBelowEvaporationTemperature = ( 0.5
                                            * evaporationTemperatureGuess )
        justAboveEvaporationTemperature = evaporationTemperatureGuess
        for narrowingStep in range( logTwoAccuracy ):
            evaporationTemperatureGuess = math.sqrt(
                                            justBelowEvaporationTemperature
                                        * justAboveEvaporationTemperature )
            print( "Trying "
                   + str( evaporationTemperatureGuess )
                   + " GeV.\n" )
            tooLowTemperature = True
            self.SetTemperature( evaporationTemperatureGuess )
            thermalMinimum = self.TryToMinimize( minimumAtZeroTemperature[
                                                        "FieldValues" ] )
            if criticalComparedToOriginRatherThanEvaporation:
                tooLowTemperature = ( thermalMinimum[ "PotentialValue" ]
                                       < ( FunctionFromDictionary(
                                                   self.EffectivePotential,
                                                               fieldOrigin,
                                              evaporationTemperatureGuess )
                                - self.potentialScaler.functionAtOrigin ) )
            else:
                thermalArray = FieldDictionaryToArray( thermalMinimum[
                                                        "FieldValues" ] )
                tooLowTemperature = ( numpy.sum( thermalArray**2 )
                                      > self.minimumSeparationSquared )
            if tooLowTemperature:
                justBelowEvaporationTemperature = (
                                              evaporationTemperatureGuess )
            else:
                justAboveEvaporationTemperature = (
                                              evaporationTemperatureGuess )
        print( "Evaporation temperature lies between "
               + str( justBelowEvaporationTemperature )
               + " GeV and "
               + str( justAboveEvaporationTemperature )
               + " GeV." )
        return [ justBelowEvaporationTemperature,
                 justAboveEvaporationTemperature ]


    def FindOptimalTunnelingTemperature( self,
                                         temperaturesForFit,
                                         justBelowCriticalTemperature,
                                         justAboveCriticalTemperature,
                                         dsbEvaporationTemperature ):
        guessedCriticalTemperature = math.sqrt(
                                               justBelowCriticalTemperature
                                           * justAboveCriticalTemperature )
        temperaturesWithThermalActions = []
        for trialTemperature in temperaturesForFit:
            optimalTunnelingTemperature = trialTemperature
            self.SetTemperature( trialTemperature )
            [ thermalDsbVacuum,
              thermalPanicVacuum ] = self.RollVacuaAtTemperature(
                                                          trialTemperature,
                                                dsbEvaporationTemperature )
            while not self.TunnelingPossible( thermalDsbVacuum,
                                           thermalPanicVacuum ):
              trialTemperature = 0.9*trialTemperature
              optimalTunnelingTemperature = trialTemperature
              self.SetTemperature( trialTemperature )
              [ thermalDsbVacuum,
                thermalPanicVacuum ] = self.RollVacuaAtTemperature(
                                                            trialTemperature,
                                                  dsbEvaporationTemperature )
            thermalAction = self.CalculateAction(
                                            falseVacuum = thermalDsbVacuum,
                                           trueVacuum = thermalPanicVacuum,
                                                        deformPath = False,
                                                 thermalNotQuantum = True )
            alreadyExcluded = ( ( ( thermalAction / trialTemperature )
                                  + math.log( thermalAction ) )
                            < self.thermalActionOverTemperatureComparison )
            if alreadyExcluded:
# If the action at a given temperature is low enough that the DSB vacuum
# (or the symmetric vacuum that becomes the DSB vacuum through a 2nd-order
# phase transition) is unlikely to have survived the time when the Universe
# was at about that temperature, no further calculation is made.
                print( "Parameter point is excluded by thermal tunneling"
                       + " at temperature "
                       + str( trialTemperature )
                       + " GeV." )
                return [ trialTemperature,
                         True,
                         str( self.ThermalTunnelingSurvivalProbability(
                                                          trialTemperature,
                                                        thermalAction ) ) ]
            print( "\nDirect path 3-dimensional action at temperature "
                   + str( trialTemperature )
                   + " GeV is "
                   + str( thermalAction )
                   + " GeV.\n\n" )
            temperaturesWithThermalActions.append( [ trialTemperature,
                                                     thermalAction ] )
        if ( len( temperaturesWithThermalActions ) is 0 ):
            print( "DSB vacuum seems to be lower than panic vacuum for"
                   + " each temperature tried: "
                   + str( temperaturesForFit )
                   + " (in GeV). No further thermal tunneling will be"
                   + "attempted." )
            self.ShouldTunnelThermally = False
            return [ 1.0,
                     False,
                     "1.0" ]
        elif ( len( temperaturesWithThermalActions ) is 1 ):
            optimalTunnelingTemperature = temperaturesWithThermalActions[ 0
                                                                     ][ 0 ]
            thermalAction = temperaturesWithThermalActions[ 0 ][ 1 ]
            print( "Only one trial temperature allowed tunneling: "
                   + str( optimalTunnelingTemperature )
                   + " GeV. This will be taken as the estimate for the"
                   + " optimal tunneling temperature." )
            return [ optimalTunnelingTemperature,
                     ( ( ( thermalAction / optimalTunnelingTemperature )
                         + math.log( thermalAction ) )
                       < self.thermalActionOverTemperatureComparison ),
                     str( self.ThermalTunnelingSurvivalProbability(
                                               optimalTunnelingTemperature,
                                                        thermalAction ) ) ]
        print( "temperaturesWithThermalActions = "
               + str( temperaturesWithThermalActions ) )
        actionArray = numpy.array( [ temperatureWithThermalAction[ 1 ]
                                     for temperatureWithThermalAction in
                                     temperaturesWithThermalActions ] )
        transformationMatrix = numpy.array(
                [ numpy.array( [ ( ( trialTemperature**degreeOfPolynomial )
                                   / ( guessedCriticalTemperature
                                       - trialTemperature )**2 )
           for degreeOfPolynomial in range( len( temperaturesForFit ) ) ] )
                             for trialTemperature in temperaturesForFit ] )
        coefficientArray = numpy.linalg.solve( transformationMatrix,
                                               actionArray )
        print( "3-dimensional action parameterized as ( "
               + str( guessedCriticalTemperature )
               + " - T )^( -2 ) * ( 0.0" )
        for coefficientIndex in range( len( coefficientArray ) ):
            print( "+ ( "
                   + str( coefficientArray[ coefficientIndex ] )
                   + " * T^"
                   + str( coefficientIndex )
                   + " )" )
        print( " ) GeV.\n\n" )
        def ActionOverTMinusLogTFit( T ):
            returnValue = 0.0
            for coefficientIndex in range( len( coefficientArray ) ):
                returnValue += ( coefficientArray[ coefficientIndex ]
                                 * T**coefficientIndex )
            return ( ( returnValue
                       / ( ( guessedCriticalTemperature - T )**2 * T ) )
                     - 4.0 * math.log( T ) )
        optimalTunnelingTemperature = ( 0.5
                                        * justBelowCriticalTemperature )
        temperatureMinimizer = minuit.Minuit( ActionOverTMinusLogTFit,
                                           T = optimalTunnelingTemperature,
                                              error_T = 1.0,
                                              limit_T = ( 1.0,
                                           justBelowCriticalTemperature ),
                                              print_level = 0,
                                              errordef = 0.01 )
        try:
            temperatureMinimizer.migrad()
            optimalTunnelingTemperature = temperatureMinimizer.values[
                                                                    'T' ]
            print( "Estimate, based on -T^( -4 ) exp( S_3( T ) / T ), of"
                   + " temperature with lowest survival probability is "
                   + str( optimalTunnelingTemperature )
                   + " GeV.\n\n" )
        except Exception as unexpectedException:
            print( "MINUIT threw an exception: \n"
                   + str( unexpectedException )
                   + "\nwhile trying to minimize the thermal survival"
                   + " probability. Half the critical temperature will"
                   + " now be used as the tunneling temperature." )
            optimalTunnelingTemperature = ( 0.5
                                           * justBelowCriticalTemperature )
        self.SetTemperature( optimalTunnelingTemperature )
        [ thermalDsbVacuum,
          thermalPanicVacuum ] = self.RollVacuaAtTemperature(
                                               optimalTunnelingTemperature,
                                                dsbEvaporationTemperature )
        thermalAction = self.CalculateAction(
                                            falseVacuum = thermalDsbVacuum,
                                           trueVacuum = thermalPanicVacuum,
                                              deformPath = False,
                                              thermalNotQuantum = True )
        print( "temperatureMinimizer.fval = "
               + str( temperatureMinimizer.fval ) )
        print( "Direct path tunneling at temperature "
               + str( optimalTunnelingTemperature )
               + " GeV:\nEstimated 3-dimensional action = "
               +str( optimalTunnelingTemperature
                     * ( temperatureMinimizer.fval
                         + ( 4.0
                            * math.log( optimalTunnelingTemperature ) ) ) )
               + " GeV, actual = "
               + str( thermalAction )
               + " GeV." )
        return [ optimalTunnelingTemperature,
                 ( ( ( thermalAction / optimalTunnelingTemperature )
                     + math.log( thermalAction ) )
                   < self.thermalActionOverTemperatureComparison ),
                 str( self.ThermalTunnelingSurvivalProbability(
                                               optimalTunnelingTemperature,
                                                        thermalAction ) ) ]


    def ThermalTunnelingSurvivalProbability( self,
                                             exclusionTemperature,
                                             currentAction ):
        thermalExponent = ( lnOfThermalIntegrationFactor
                            - ( currentAction / exclusionTemperature ) )
        if ( thermalExponent < -exponentCutOff ):
            print( "Warning! Thermal tunneling survival probability for"
                   " a very large ratio ("
                   + str( currentAction / exclusionTemperature )
                   + ") of 3-dimensional action ("
                   + str( currentAction )
                   + " GeV) to temperature ("
                   + str( exclusionTemperature )
                   + " GeV) asked for, which would probably cause an"
                   + " overflow in the evaluation of the exponent."
                   + " Returning a survival probability of 1." )
            return 1.0
# We don't need to consider thermalExponent > exponentCutOff as
# currentAction and exclusionTemperature should both be positive, and
# lnOfThermalIntegrationFactor < exponentCutOff.
        else:
            integratedDecayWidth = ( math.exp( thermalExponent )
                                     / currentAction )
            if ( integratedDecayWidth > exponentCutOff ):
                print( "Warning! Integrated thermal decay width is so"
                       + " large and positive that an overflow error"
                       + " would occur when exponentiating to get the"
                       + " survival probability, so returning a survival"
                       + " probability of 0." )
                return 0.0
# We don't need to consider integratedDecayWidth < -exponentCutOff as
# math.exp( thermalExponent ) must be positive, and currentAction should be
# positive.
            return math.exp( -integratedDecayWidth )

# End of Vevacious class

